{\rtf1\ansi\ansicpg1252\deff0\deftab720\deflang2057
{\fonttbl{\f0\fswiss Arial;}{\f1\fswiss \fcharset0 Arial;}{\f2\fnil \fcharset0 Courier New;}{\f3\fmodern Courier New;}{\f4\fmodern \fcharset0 Courier New;}{\f5\fnil \fcharset2 WingDings;}}
{\colortbl\red0\green0\blue0;\red0\green128\blue0;\red0\green0\blue255;\red255\green0\blue0;}
${\footnote {$}PJEnvVars unit}
#{\footnote {#}IDH_EV_UNIT}
@{\footnote {@}Description of PJEnvVars unit.}
K{\footnote {K}PJEnvVars}
A{\footnote {A}PJEnvVars}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b PJEnvVars unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard This unit contains a {\strike set of functions and procedures}{\v IDH_ENVVARROUTINES} that can manipulate \plain\f1\fs18\cf0 a process'\plain\f0\fs18\cf0  environment block and the variables contained in it.
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 It also defines a component, {\strike TPJEnvVars}{\v IDH_EV_CLASS},  that encapsu\plain\f1\fs18\cf0 la\plain\f0\fs18\cf0 tes a process' environment variables and provides an easy way to change their values, \plain\f1\fs18\cf0 create then and \plain\f0\fs18\cf0 delete them.
\par \plain\f0\fs8\cf0 
\par \plain\f1\fs18\cf0 To see examples of using the code see the file \plain\f2\fs18\cf0 DemoCode.htm\plain\f1\fs18\cf0  that is distributed with the unit.
\par 
\par \plain\f1\fs18\cf3\b Note:\plain\f1\fs18\cf0  This help file has been superseded by the Environment Variables Unit\plain\f1\fs18\cf2  {\strike wiki}{\v *!ExecFile("http://www.delphidabbler.com/url/envvars-wiki")}\plain\f1\fs18\cf0  (http://www.delphidabbler.com/url/envvars-wiki).\plain\f0\fs18\cf0 
\par \page 
${\footnote {$}TPJEnvVars}
#{\footnote {#}IDH_EV_CLASS}
@{\footnote {@}TPJEnvVars component overview.}
K{\footnote {K}TPJEnvVars}
A{\footnote {A}TPJEnvVars;TPJEnvVars_object}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \{bmlt PJEnvVars.bmp\}\plain\f0\fs22\cf2\b  TPJEnvVars\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\ul Heirachy}{\v IDH_EV_HEIRACHY}          {\ul Properties}{\v IDH_EV_PROPERTIES}          {\ul Methods}{\v IDH_EV_METHODS}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard The TPJEnvVars component provides easy access to environment variables.
\par 
\par \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 This component \plain\f1\fs18\cf0 provides\plain\f0\fs18\cf0  access to the environment variables in the current \plain\f1\fs18\cf0 process' \plain\f0\fs18\cf0 environment block. Environment variables can be read\plain\f1\fs18\cf0 , \plain\f0\fs18\cf0 updated or created using the {\strike Values}{\v IDH_EV_VALUES} property and deleted using the {\strike DeleteVar}{\v IDH_EV_DELETEVAR} method. The names of all available environment variables can be \plain\f1\fs18\cf0 enumerated\plain\f0\fs18\cf0  using the {\strike EnumNames}{\v IDH_EV_ENUMNAMES} \plain\f1\fs18\cf0 or {\strike GetEnumerator}{\v IDH_EV_GETENUMERATOR} \plain\f0\fs18\cf0 method\plain\f1\fs18\cf0 s\plain\f0\fs18\cf0 , while the {\strike Count}{\v IDH_EV_COUNT} property \plain\f1\fs18\cf0 returns \plain\f0\fs18\cf0 the number of variables.
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Only one instance of a TPJEnvVars component can be placed on any form. An attempt to place further instances on \plain\f1\fs18\cf0 a \plain\f0\fs18\cf0  form causes an exception to be raised.
\par \page 
${\footnote {$}TPJEnvVars heirachy}
#{\footnote {#}IDH_EV_HEIRACHY}
@{\footnote {@}Object heirachy for TPJEnvVars.}

\pard \plain \plain\f0\fs18\cf0\b Heirachy\plain\f0\fs18\cf0 
\par 
\par {\strike TObject}{\v !AL(TObject_object,1)}
\par      |
\par {\strike TPersistent}{\v !AL(TPersistent_object,1)}
\par      |
\par {\strike TComponent}{\v !AL(TComponent_object,1)}
\par \page 
${\footnote {$}TPJEnvVars properties}
#{\footnote {#}IDH_EV_PROPERTIES}
@{\footnote {@}Properties of TPJEnvVars.}

\pard \plain \plain\f0\fs18\cf0\b Properties\plain\f0\fs18\cf0 
\par 
\par \pard \tx400 rr\tab {\strike Count}{\v IDH_EV_COUNT}
\par \tab {\strike Name}{\v !AL(TComponent_Name,1)}
\par \tab {\strike Tag}{\v !AL(TComponent_Tag,1)}
\par r\tab {\strike Values}{\v IDH_EV_VALUES}
\par 
\par r = runtime only.
\par rr = runtime, read only.
\par \page 
${\footnote {$}TPJEnvVars.Count}
#{\footnote {#}IDH_EV_COUNT}
@{\footnote {@}Property description.}
K{\footnote {K}Count,TPJEnvVars;TPJEnvVars,Count;Count}
A{\footnote {A}TPJEnvVars_Count;Count_property;Count}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b TPJEnvVars.Count\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike TPJEnvVars}{\v IDH_EV_CLASS}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard The number of environment variables.
\par 
\par \pard \keep \plain\f3\fs18\cf0\b property\plain\f3\fs18\cf0  Count: Integer;\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 The Count property returns the number of environment variables in the current process' environment.
\par \page 
${\footnote {$}TPJEnvVars.Values}
#{\footnote {#}IDH_EV_VALUES}
@{\footnote {@}Property description.}
K{\footnote {K}Values,TPJEnvVars;TPJEnvVars,Values;Values}
A{\footnote {A}TPJEnvVars_Values;Values_property;Values}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b TPJEnvVars.Values\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike TPJEnvVars}{\v IDH_EV_CLASS}          {\strike See also}{\v !AL(TPJEnvVars_EnumNames;TPJEnvVars_DeleteVar)}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard \plain\f1\fs18\cf0 Provides\plain\f0\fs18\cf0  read write access to environment variables.
\par 
\par \pard \keep \plain\f3\fs18\cf0\b property\plain\f3\fs18\cf0  Values[Name: \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ]: \plain\f3\fs18\cf0\b string\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 The Values property enables the current process' environment variables to be read and written by name.
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 To get the value of an environment variable treat the Values property as an array of values indexed by the environment variable name. For example Value['Foo'] returns the value of an environment variable named 'Foo'. If there is no environment variable with the required name then the empty string is returned.
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Values of existing environment variables can be set by assigning string values to \plain\f1\fs18\cf0 the \plain\f0\fs18\cf0 Values property, indexed by the required environment variable name. For example Values['Foo'] := 'Bar' sets the environment variable 'Foo' to have value 'Bar'. If no environment variable with the given name exists, a \plain\f1\fs18\cf0 new \plain\f0\fs18\cf0 variable is created \plain\f1\fs18\cf0 and set to \plain\f0\fs18\cf0 the \plain\f1\fs18\cf0 given\plain\f0\fs18\cf0  value. Setting an environment variable to the empty string deletes \plain\f1\fs18\cf0 the \plain\f0\fs18\cf0 variable.
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 If an error occurs when setting an environment variable, for example if the environment space is full, a {\strike EPJEnvVar}{\v IDH_EEV_CLASS} exception is raised.
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 The names of all current environment variables can be found using the {\strike EnumNames}{\v IDH_EV_ENUMNAMES} method.
\par \page 
${\footnote {$}TPJEnvVars methods}
#{\footnote {#}IDH_EV_METHODS}
@{\footnote {@}Methods of TPJEnvVars.}

\pard \plain \plain\f0\fs18\cf0\b Methods\plain\f0\fs18\cf0 
\par 
\par In addition to the methods of TComponent, TPJEnvVars has the following \plain\f1\fs18\cf0 additional \plain\f0\fs18\cf0 public methods:
\par \plain\f0\fs8\cf0 
\par \pard \tx400 \plain\f0\fs18\cf0 \tab {\strike Create}{\v IDH_EV_CREATE}
\par \tab {\strike DeleteVar}{\v IDH_EV_DELETEVAR}
\par \tab {\strike EnumNames}{\v IDH_EV_ENUMNAMES}
\par \plain\f1\fs18\cf0 \tab {\strike GetEnumerator}{\v IDH_EV_GETENUMERATOR}\plain\f0\fs18\cf0 
\par \page 
${\footnote {$}TPJEnvVars.Create}
#{\footnote {#}IDH_EV_CREATE}
@{\footnote {@}Constructor description.}
K{\footnote {K}Create,TPJEnvVars;TPJEnvVars,Create;Create}
A{\footnote {A}TPJEnvVars_Create;Create_method;Create}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b TPJEnvVars.Create\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike TPJEnvVars}{\v IDH_EV_CLASS}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Class constructor.
\par 
\par \pard \keep \plain\f3\fs18\cf0\b constructor\plain\f3\fs18\cf0  Create(AOwner: TComponent);\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Create constructs a new instance of the component. Only one instance of a TPJEnvVars component is allowed on any form\plain\f1\fs18\cf0  (or to be owned by any component)\plain\f0\fs18\cf0 . An attempt to create a second instance will cause an \plain\f1\fs18\cf0 E\plain\f0\fs18\cf0 xception to be raised and the duplicate instance will not be created.
\par \plain\f0\fs8\cf0 
\par \plain\f1\fs18\cf0 Multiple instances \plain\f1\fs18\cf0\i can\plain\f1\fs18\cf0  be created by passing nil as the owner.\plain\f0\fs18\cf0 
\par \page 
${\footnote {$}TPJEnvVars.DeleteVar}
#{\footnote {#}IDH_EV_DELETEVAR}
@{\footnote {@}Method description.}
K{\footnote {K}DeleteVar,TPJEnvVars;TPJEnvVars,DeleteVar;DeleteVar}
A{\footnote {A}TPJEnvVars_DeleteVar;DeleteVar_method;DeleteVar}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b TPJEnvVars.DeleteVar\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike TPJEnvVars}{\v IDH_EV_CLASS}          {\strike See also}{\v !AL(PJEnvVars_DeleteEnvVar)}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Deletes an environment variable.
\par 
\par \pard \keep \plain\f3\fs18\cf0\b procedure\plain\f3\fs18\cf0  DeleteVar(\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  Name: \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 );\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Deletes the named environment variable. Does nothing if the environment variable does not exist. \plain\f1\fs18\cf0 This is functionally the same as setting \plain\f2\fs18\cf0 Values[Name] := '';\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 A {\strike EPJEnvVars}{\v IDH_EEV_CLASS} exception is raised if it is not possible to delete the variable.
\par \page 
${\footnote {$}TPJEnvVars.EnumNames}
#{\footnote {#}IDH_EV_ENUMNAMES}
@{\footnote {@}Method description.}
K{\footnote {K}EnumNames,TPJEnvVars;TPJEnvVars,EnumNames;EnumNames}
A{\footnote {A}TPJEnvVars_EnumNames;EnumNames_method;EnumNames}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b TPJEnvVars.EnumNames\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike TPJEnvVars}{\v IDH_EV_CLASS}          {\strike See also}{\v !AL(TPJEnvVars_GetEnumerator;TPJEnvVars_Values;PJEnvVars_GetAllEnvVars)}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Enumerates all environment variables.
\par 
\par \pard \keep \plain\f3\fs18\cf0\b type\plain\f3\fs18\cf0  TPJEnvVarsEnum = \plain\f3\fs18\cf0\b procedure\plain\f3\fs18\cf0 (\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  VarName: \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ; 
\par   Data: Pointer) \plain\f3\fs18\cf0\b of object\plain\f3\fs18\cf0 ;
\par \pard \plain\f0\fs8\cf0 
\par \pard \keep \plain\f3\fs18\cf0\b procedure\plain\f3\fs18\cf0  EnumNames(Callback: TPJEnvVarsEnum; Data: Pointer);\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 EnumNames enumerates all environment variables in the current environment block. The given \plain\f1\fs18\cf0 C\plain\f0\fs18\cf0 allback method is called once for each environment variable. The \plain\f1\fs18\cf0 C\plain\f0\fs18\cf0 allback method is passed the name of the environment variable and the data value supplied as a parameter to EnumNames.\plain\f1\fs18\cf0  Data is a user defined value and is not processed by EnumNames.
\par \plain\f1\fs8\cf0 
\par \plain\f1\fs18\cf0 The user must implement Callback as a method. 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 The values associated with the environment variables can be accessed using the {\strike Values}{\v IDH_EV_VALUES} property.
\par \page 
${\footnote {$}TPJEnvVars.GetEnumerator}
#{\footnote {#}IDH_EV_GETENUMERATOR}
@{\footnote {@}Method description.}
K{\footnote {K}GetEnumerator,TPJEnvVars;TPJEnvVars,GetEnumerator;GetEnumerator}
A{\footnote {A}TPJEnvVars_GetEnumerator;GetEnumerator_method;GetEnumerator}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b TPJEnvVars.GetEnumerator\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike TPJEnvVars}{\v IDH_EV_CLASS}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard \plain\f1\fs18\cf0 Creates an enumerator that enumerates all the environment variable names\plain\f0\fs18\cf0 .\plain\f3\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \pard \keep \plain\f4\fs18\cf0\b function\plain\f3\fs18\cf0  \plain\f4\fs18\cf0 GetEnumerator: TPJEnvVarsEnumerator\plain\f3\fs18\cf0 ;\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f1\fs18\cf0 This method is provided to support the \plain\f1\fs18\cf0\b for..in\plain\f1\fs18\cf0  construct supported by Delphi 2005 and later. See the\plain\f1\fs18\cf2  {\strike wiki}{\v *!ExecFile("http://code.google.com/p/ddab-lib/wiki/TPJEnvVarsGetEnumerator")}\plain\f1\fs18\cf0  (http://code.google.com/p/ddab-lib/wiki/TPJEnvVarsGetEnumerator) for details.\plain\f0\fs18\cf0 
\par \page 
${\footnote {$}EPJEnvVars}
#{\footnote {#}IDH_EEV_CLASS}
@{\footnote {@}EPJEnvVars exception.}
K{\footnote {K}EPJEnvVars}
A{\footnote {A}EPJEnvVars;EPJEnvVars_object}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b EPJEnvVars\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\ul Heirachy}{\v IDH_EEV_HEIRACHY}          {\ul Properties}{\v IDH_EEV_PROPERTIES}          {\ul Methods}{\v IDH_EEV_METHODS}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Exception class used by {\strike TPJEnvVars}{\v IDH_EV_CLASS}.
\par 
\par \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Exception\plain\f1\fs18\cf0 s\plain\f0\fs18\cf0  of this class are raised by the TPJEnvVars component when an error occurs while attempting to modify environment variables. The Windows error code asso\plain\f1\fs18\cf0 ciated\plain\f0\fs18\cf0  with the error is stored in the public ErrorCode property, while the Windows error message is recorded in the Message property.
\par \page 
${\footnote {$}EPJEnvVars heirachy}
#{\footnote {#}IDH_EEV_HEIRACHY}
@{\footnote {@}Object heirachy for EPJEnvVars.}

\pard \plain \plain\f0\fs18\cf0\b Heirachy\plain\f0\fs18\cf0 
\par 
\par \plain\f1\fs18\cf0\i\b Delphi 3, 4 and 5:\plain\f1\fs18\cf0\i 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike TObject}{\v !AL(TObject_object,1)}
\par      |
\par {\strike Exception}{\v !AL(Exception_object,1)}
\par      |
\par {\strike EWin32Error}{\v !AL(EWin32Error_object,1)}
\par 
\par \plain\f1\fs18\cf0\i\b Delphi 6 and later:\plain\f1\fs18\cf0 
\par \plain\f1\fs12\cf0 
\par \plain\f1\fs18\cf0 {\strike TObject}{\v !AL(TObject_object,1)}
\par \plain\f0\fs18\cf0      |
\par \plain\f1\fs18\cf0 {\strike Exception}{\v !AL(Exception_object,1)}
\par \plain\f0\fs18\cf0      |
\par \plain\f1\fs18\cf0 {\strike EOSError}{\v !AL(EOSError_object,1)}
\par \page 
${\footnote {$}EPJEnvVars properties}
#{\footnote {#}IDH_EEV_PROPERTIES}
@{\footnote {@}Properties of EPJEnvVars.}

\pard \plain \plain\f0\fs18\cf0\b Properties\plain\f0\fs18\cf0 
\par 
\par \pard \tx400 All properties are inherited without change from {\strike EWin32Error}{\v !AL(EWin32Error_object,1)}\plain\f1\fs18\cf0  (Delphi 3-5) or {\strike EOSError}{\v !AL(EOSError_object,1)} (Delphi 6 and later)\plain\f0\fs18\cf0 . This exception is the same as {\strike Exception}{\v !AL(Exception_object,1)} except for the addition of the ErrorCode (DWORD) property which stores the error code that generated the exception. EPJEnvVars uses the ErrorCode property inherited from EWin32Error\plain\f1\fs18\cf0  or EOSError\plain\f0\fs18\cf0 .
\par \page 
${\footnote {$}EPJEnvVars methods}
#{\footnote {#}IDH_EEV_METHODS}
@{\footnote {@}Methods of EPJEnvVars.}

\pard \plain \plain\f0\fs18\cf0\b Methods\plain\f0\fs18\cf0 
\par 
\par \pard \tx400 All methods of EPJEnvVars are inherited without change from {\strike EWin32Error}{\v !AL(EWin32Error_object,1)}\plain\f1\fs18\cf0  (Delphi 3-5) or {\strike EOSError}{\v !AL(EOSError_object,1)} (Delphi 6 and later)\plain\f0\fs18\cf0 .
\par \page 
${\footnote {$}TPJEnvVarsEnum}
#{\footnote {#}IDH_TPJENVVARSENUM}
@{\footnote {@}Description of TPJEnvVarsEnum procedural type.}
K{\footnote {K}TPJEnvVarsEnum}
A{\footnote {A}TPJEnvVarsEnum}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b TPJEnvVarsEnum\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 This procedural type is the type of the callback method that has to be passed to the {\strike EnumNames}{\v IDH_EV_ENUMNAMES} method of the {\strike TPJEnvVars }{\v IDH_EV_CLASS}component. It is declared as:
\par \plain\f0\fs8\cf0 
\par \plain\f3\fs18\cf0\b type\plain\f3\fs18\cf0  TPJEnvVarsEnum = \plain\f3\fs18\cf0\b procedure\plain\f3\fs18\cf0 (\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  VarName: \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ; 
\par   Data: Pointer) \plain\f3\fs18\cf0\b of object\plain\f3\fs18\cf0 ;
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 EnumNames calls this method for each environment variable in the environment block. The variable's name is passed in VarName and \plain\f1\fs18\cf0 the\plain\f0\fs18\cf0  \plain\f1\fs18\cf0 D\plain\f0\fs18\cf0 ata pointer passed to EnumNames by the user is passed in the Data parameter.\plain\f1\fs18\cf0  Data is not processed by EnumNames.\plain\f0\fs18\cf0 
\par \page 
${\footnote {$}Environment Variable Routines}
#{\footnote {#}IDH_ENVVARROUTINES}
@{\footnote {@}List of the environment variables handling routines defined in PJEnvVars.}
K{\footnote {K}environment variable handling routines}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b Environment Variable Handling Routines\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard The {\strike PJEnvVars}{\v IDH_EV_UNIT} unit defines various environment variable handling routines. \plain\f1\fs18\cf0 Those routines documented here\plain\f0\fs18\cf0  are:
\par \plain\f0\fs8\cf0 
\par \pard \fi-400 \li400 \tx400 \plain\f5\fs18\cf0 \'A7\plain\f0\fs18\cf0 \tab {\strike GetEnvVarValue}{\v IDH_GETENVVARVALUE}
\par \plain\f5\fs18\cf0 \'A7\plain\f0\fs18\cf0 \tab {\strike SetEnvVarValue}{\v IDH_SETENVVARVALUE}
\par \plain\f5\fs18\cf0 \'A7\plain\f0\fs18\cf0 \tab {\strike DeleteEnvVar}{\v IDH_DELETEENVVAR}
\par \plain\f5\fs18\cf0 \'A7\plain\f0\fs18\cf0 \tab {\strike GetAllEnvVars}{\v IDH_GETALLENVVARS}
\par \plain\f5\fs18\cf0 \'A7\plain\f0\fs18\cf0 \tab {\strike ExpandEnvVars}{\v IDH_EXPANDENVVARS}
\par \plain\f5\fs18\cf0 \'A7\plain\f0\fs18\cf0 \tab {\strike CreateEnvBlock}{\v IDH_CREATEENVBLOCK}
\par 
\par \pard \tx400 \plain\f1\fs18\cf0 In addition there were three routines added in release 2.0: EnvBlockSize and two overloaded versions of GetAllEnvVarNames. These routines are documented in the wiki at http://code.google.com/p/ddab-lib/wiki/PJEnvVarsRoutines\plain\f0\fs18\cf0 
\par \page 
${\footnote {$}GetEnvVarValue}
#{\footnote {#}IDH_GETENVVARVALUE}
@{\footnote {@}Function description.}
K{\footnote {K}GetEnvVarValue}
A{\footnote {A}PJEnvVars_GetEnvVarValue;GetEnvVarValue}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b GetEnvVarValue\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike See also}{\v !AL(PJEnvVars_SetEnvVarValue;PJEnvVars_DeleteEnvVar;PJEnvVars_GetAllEnvVars;TPJEnvVars_Values)}          {\strike Group}{\v IDH_ENVVARROUTINES}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Returns the value of an environment variable.
\par 
\par \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \pard \keep \plain\f3\fs18\cf0\b function\plain\f3\fs18\cf0  GetEnvVarValue(\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  VarName: \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ): \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ;\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Returns the value for the given environment variable. The empty string is returned if the named variable does not exist.
\par 
\par \page 
${\footnote {$}SetEnvVarValue}
#{\footnote {#}IDH_SETENVVARVALUE}
@{\footnote {@}Function description.}
K{\footnote {K}SetEnvVarValue}
A{\footnote {A}PJEnvVars_SetEnvVarValue;SetEnvVarValue}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b SetEnvVarValue\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike See also}{\v !AL(PJEnvVars_GetEnvVarValue;PJEnvVars_DeleteEnvVar;TPJEnvVars_Values)}          {\strike Group}{\v IDH_ENVVARROUTINES}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Sets the value of the given environment variable.
\par 
\par \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \pard \keep \plain\f3\fs18\cf0\b function\plain\f3\fs18\cf0  SetEnvVarValue(\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  VarName, 
\par   VarValue: \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ): Integer;\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Sets the given environment variable to the given value. If there is no environment variable with the given name then it is created. If value is the empty string then the environment variable is deleted. 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Returns 0 on success or a Windows error code on error. The most likely cause of error is that the environment block is full and there is no room for the new value or to create a new variable. A description of any error can be found by passing the error code to the {\strike SysErrorMessage}{\v !AL(SysErrorMessage,1)} function defined in SysUtils.
\par \page 
${\footnote {$}DeleteEnvVar}
#{\footnote {#}IDH_DELETEENVVAR}
@{\footnote {@}Function description.}
K{\footnote {K}DeleteEnvVar}
A{\footnote {A}PJEnvVars_DeleteEnvVar;DeleteEnvVar}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b DeleteEnvVar\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike See also}{\v !AL(PJEnvVars_SetEnvVarValue;TPJEnvVars_DeleteVar)}          {\strike Group}{\v IDH_ENVVARROUTINES}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Deletes the given environment variable.
\par 
\par \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \pard \keep \plain\f3\fs18\cf0\b function\plain\f3\fs18\cf0  DeleteEnvVar(\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  VarName: \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ): Integer;\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Deletes the given environment variable. If the variable does not exist DeleteEnvVar does nothing.
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 If DeleteEnvVar completes successfuly \plain\f1\fs18\cf0 then \plain\f0\fs18\cf0 0 is returned. If an error occurs then a non-zero Windows error code is returned. A description of the error can be found by passing the code to the {\strike SysErrorMessage}{\v !AL(SysErrorMessage,1)} function defined in SysUtils.
\par \page 
${\footnote {$}GetAllEnvVars}
#{\footnote {#}IDH_GETALLENVVARS}
@{\footnote {@}Function description.}
K{\footnote {K}GetAllEnvVars}
A{\footnote {A}PJEnvVars_GetAllEnvVars;GetAllEnvVars}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b GetAllEnvVars\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike See also}{\v !AL(TPJEnvVars.EnumNames)}          {\strike Group}{\v IDH_ENVVARROUTINES}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Fills a string list with all the environment variables.
\par 
\par \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \pard \keep \plain\f3\fs18\cf0\b function\plain\f3\fs18\cf0  GetAllEnvVars(\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  Vars: TStrings): Integer;\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 Copies all the environment variables available to the current process in to the given string list. Each item in the string list represents one environment variable in the form NAME=VALUE. Any previous contents of the string list are lost. 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 The size of the environment block in \plain\f1\fs18\cf0\i characters\plain\f0\fs18\cf0  is returned.\plain\f1\fs18\cf0  To get the size of the environment block in bytes multiply the return value by SizeOf(Char).\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 It is permitted to pass \plain\f0\fs18\cf0\b nil\plain\f0\fs18\cf0  as the parameter to GetAllEnvVars. If this is done \plain\f1\fs18\cf0 then \plain\f0\fs18\cf0 details of the environment variables are not provided, but the size of the environment block\plain\f1\fs18\cf0  in characters\plain\f0\fs18\cf0  is returned. Therefore this function can also be used to determine the size of the environment block.
\par \page 
${\footnote {$}ExpandEnvVars}
#{\footnote {#}IDH_EXPANDENVVARS}
@{\footnote {@}Function description.}
K{\footnote {K}ExpandEnvVars}
A{\footnote {A}PJEnvVars_ExpandEnvVars;ExpandEnvVars}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b ExpandEnvVars\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike Group}{\v IDH_ENVVARROUTINES}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Replaces environment variables with their values.
\par 
\par \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \pard \keep \plain\f3\fs18\cf0\b function\plain\f3\fs18\cf0  ExpandEnvVars(\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  Str: \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ): \plain\f3\fs18\cf0\b string\plain\f3\fs18\cf0 ;\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 ExpandEnvVars replaces any environment variables \plain\f1\fs18\cf0 embedded \plain\f0\fs18\cf0 in the given string with their values and returns the modified string. Environment variables should be delimited by % characters thus: %ENVVAR%. If any environment variables are not recognised their names are left unmodified. The case of the environment variable name is not significant: i.e. %\plain\f1\fs18\cf0 E\plain\f0\fs18\cf0 NVVAR% is equivalent to %envvar%.
\par 
\par \page 
${\footnote {$}CreateEnvBlock}
#{\footnote {#}IDH_CREATEENVBLOCK}
@{\footnote {@}Function description.}
K{\footnote {K}CreateEnvBlock}
A{\footnote {A}PJEnvVars_CreateEnvBlock;CreateEnvBlock}

\pard \plain \pard \keepn \plain\f0\fs8\cf0 
\par \plain\f0\fs22\cf2\b CreateEnvBlock\plain\f0\fs18\cf0 
\par \plain\f0\fs12\cf0 
\par \plain\f0\fs18\cf0 {\strike Group}{\v IDH_ENVVARROUTINES}
\par \plain\f0\fs8\cf0  \plain\f0\fs18\cf0 
\par \pard Creates a new environment block for passing to a new process.
\par 
\par \plain\f0\fs18\cf0\b Unit\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 {\strike PJEnvVars}{\v IDH_EV_UNIT}
\par 
\par \pard \keep \plain\f3\fs18\cf0\b function\plain\f3\fs18\cf0  CreateEnvBlock(\plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  NewEnv: TStrings;
\par   \plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  IncludeCurrent: Boolean; \plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  Buffer: Pointer;
\par   \plain\f3\fs18\cf0\b const\plain\f3\fs18\cf0  BufSize: Integer): Integer;\plain\f0\fs18\cf0 
\par \pard 
\par \plain\f0\fs18\cf0\b Description\plain\f0\fs18\cf0 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 CreateEnvBlock creates a new environment block which can be used to pass to another process. 
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 The new environment block is stored in the memory pointed to by Buffer, which is taken to be at least BufSize \plain\f1\fs18\cf0 characters\plain\f0\fs18\cf0 . The actual size of the environment block \plain\f1\fs18\cf0 in characters \plain\f0\fs18\cf0 is returned by CreateEnvBlock. If the buffer provided is nil or is too small then no block is created and the return value is the required buffer size\plain\f1\fs18\cf0  in characters\plain\f0\fs18\cf0 .
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 The NewEnv and IncludeCurrent parameters determine what is included in the new environment block. If the NewEnv string list is not nil then it should contain a list of environment variables in the form NAME=VALUE. The new environment block will contain these values. If IncludeCurrent is true then the new environment block will also include a copy of the current process's environment block.
\par \plain\f0\fs8\cf0 
\par \plain\f0\fs18\cf0 The usual way to call CreateEnvBlock is to use it once with a nil buffer to get the required buffer size, allocate the buffer and then call \plain\f1\fs18\cf0 CreateEnvBlock \plain\f0\fs18\cf0 again\plain\f1\fs18\cf0 , this time passing the actual buffer and its size.
\par \plain\f0\fs8\cf0 
\par \plain\f1\fs18\cf0\b Warning: \plain\f1\fs18\cf0 It is important to note that CreateEnvBlock treats buffer sizes in \plain\f1\fs18\cf0\i characters\plain\f1\fs18\cf0 , not bytes, which is not the same thing on Unicode Delphis. When allocating buffers in bytes (e.g. with GetMem) you must multiply the required size returned from CreateEnvBlock by SizeOf(Char). Alternatively, use a routine such as StrAlloc that automatically takes account of the character size.
\par \plain\f0\fs8\cf0 
\par \plain\f1\fs18\cf0 The format of the environment block stored in Buffer is a #0 separated list of environment variables in NAME=VALUE form, terminated by #0#0. E.g.:
\par \plain\f1\fs8\cf0 
\par \pard \li400 \plain\f2\fs18\cf0 Name1=Value1#0Name2=Value2#Name3=Value3#0#0
\par \pard \plain\f0\fs18\cf0 
\par \page 
}